Description,Target,Expression
traveler has sentri pass,tour_sentri,df['lane_type'] == 'sentri'
list of POE wait periods columns,_WAIT_COLS,land_use.filter(regex=wait_time_col_regex).columns.tolist()
list of unique POE wait periods,_WAIT_PERIOD_STARTS,"pd.Series(list(set([col.split('_wait_')[1] for col in _WAIT_COLS])))"
subtract all tour start times from the wait time periods,_START_IDX_DIFFS,"np.subtract(_WAIT_PERIOD_STARTS.astype(int).values, df.start.values.reshape(-1,1))"
get the index of wait time period for each tour,_START_IDXS,"np.where(_START_IDX_DIFFS <= 0, _START_IDX_DIFFS, -np.inf).argmax(axis=1)"
POE wait period for each tour,_TOUR_WAIT_PERIODS,_WAIT_PERIOD_STARTS[_START_IDXS]
pedestrian crossing wait time column name for each tour,_ped_wait_cols,'ped_wait_' + _TOUR_WAIT_PERIODS
standard crossing wait time column name for each tour,_std_wait_cols,'std_wait_' + _TOUR_WAIT_PERIODS
sentri crossing wait time column name for each tour,_sentri_wait_cols,'sentri_wait_' + _TOUR_WAIT_PERIODS
unpivot (a.k.a melt) the POE wait time data,_LONG_WAIT_TIMES,"land_use[land_use['poe_id'].notnull()].reset_index().melt(id_vars='zone_id', value_vars=_WAIT_COLS, var_name='wait_type_period', value_name='time').set_index(['zone_id','wait_type_period'])"
,std_wait,"_LONG_WAIT_TIMES.reindex([df[orig_col_name],_std_wait_cols])['time'].values"
,sentri_wait,"_LONG_WAIT_TIMES.reindex([df[orig_col_name],_sentri_wait_cols])['time'].values"
,ped_wait,"_LONG_WAIT_TIMES.reindex([df[orig_col_name],_ped_wait_cols])['time'].values"


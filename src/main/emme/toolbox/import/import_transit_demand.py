#//////////////////////////////////////////////////////////////////////////////
#////                                                                       ///
#//// Copyright INRO, 2016-2017.                                            ///
#//// Rights to use and modify are granted to the                           ///
#//// San Diego Association of Governments and partner agencies.            ///
#//// This copyright notice must be preserved.                              ///
#////                                                                       ///
#//// import/import_transit_demand.py                                       ///
#////                                                                       ///
#////                                                                       ///
#////                                                                       ///
#////                                                                       ///
#//////////////////////////////////////////////////////////////////////////////

TOOLBOX_ORDER = 14


import inro.modeller as _m
import inro.emme.matrix as _matrix
import traceback as _traceback
import numpy
import omx as _omx
import os


dem_utils = _m.Modeller().module('sandag.utilities.demand')
gen_utils = _m.Modeller().module("sandag.utilities.general")


class ImportMatrices(_m.Tool(), gen_utils.Snapshot):

    output_dir = _m.Attribute(unicode)
    
    tool_run_msg = ""

    @_m.method(return_type=_m.UnicodeType)
    def tool_run_msg_status(self):
        return self.tool_run_msg

    def __init__(self):
        project_dir = os.path.dirname(_m.Modeller().desktop.project.path)
        main_dir = os.path.dirname(project_dir)
        self.output_dir = os.path.join(main_dir, "output")
        self.attributes = ["output_dir"]

    def page(self):
        pb = _m.ToolPageBuilder(self)
        pb.title = "Import transit demand"
        pb.description = """ 
<div style="text-align:left">    
    Imports the trip matrices generated by CT-RAMP in OMX format. <br>
    A total of 50 OMX files are expected, for 5 time periods
    EA, AM, MD, PM and EV, times 5 model segments for transit:
    <ul>
        <li>tranTrips_XX.omx</li>
        <li>tranCrossBorderTrips_XX.omx</li>
        <li>tranAirportTrips_XX.omx</li>
        <li>tranVisitorTrips_XX.omx</li>
        <li>tranInternalExternalTrips_XX.omx</li>
    </ul>
</div>
        """
        pb.branding_text = "- SANDAG - Model"

        if self.tool_run_msg != "":
            pb.tool_run_status(self.tool_run_msg_status)
        pb.add_select_file('output_dir', 'directory',
                           title='Select output directory')
        return pb.render()

    def run(self):
        self.tool_run_msg = ""
        try:
            scenario = _m.Modeller().scenario
            self(self.output_dir, scenario)
            run_msg = "Tool completed"
            self.tool_run_msg = _m.PageBuilder.format_info(run_msg, escape=False)
        except Exception as error:
            self.tool_run_msg = _m.PageBuilder.format_exception(
                error, _traceback.format_exc(error))
            raise

    @_m.logbook_trace("Create TOD transit trip tables", save_arguments=True)
    def __call__(self, output_dir, scenario):
        attributes = {"output_dir": output_dir}
        gen_utils.log_snapshot("Sum demand", str(self), attributes)

        self.scenario = scenario
        self.output_dir = output_dir
        self.import_transit_trips()

    @_m.logbook_trace("Import CT-RAMP transit trips from OMX")
    def import_transit_trips(self):
        emmebank = self.scenario.emmebank
        emme_zones = self.scenario.zone_numbers
        person = self.lookup_omx("tranTrips")
        cross_border = self.lookup_omx("tranCrossBorderTrips")
        airport = self.lookup_omx("tranAirportTrips")
        visitor = self.lookup_omx("tranVisitorTrips")
        internal_external = self.lookup_omx("tranInternalExternalTrips")
        try:
            periods = ["EA", "AM", "MD", "PM", "EV"]
            for period in periods:
                with _m.logbook_trace("Period %s" % period):
                    modes =     ["SET1", "SET2", "SET3"]
                    omx_modes = ["BUS", "ALL", "ALLPEN"]
                    modes = [period + "_" + m for m in modes]
                    omx_modes = [m + "_" + period for m in omx_modes]
                    for mode, omx_mode in zip(modes, omx_modes):
                        with _m.logbook_trace("Import for mode %s" % mode):
                            visitor_demand = visitor[period][omx_mode].read()
                            cross_border_demand = cross_border[period][omx_mode].read()
                            airport_demand = airport[period][omx_mode].read()
                            person_demand = person[period][omx_mode].read()
                            internal_external_demand = internal_external[period][omx_mode].read()
                            total_ct_ramp_trips = (
                                visitor_demand + cross_border_demand + airport_demand 
                                + person_demand + internal_external_demand)
                            
                            zone_mapping = person[period].mapping(person[period].listMappings()[0]).items()
                            zone_mapping.sort(key=lambda x: x[1])
                            omx_zones = [x[0] for x in zone_mapping]
                            matrix_data = _matrix.MatrixData(type='f', indices=[omx_zones, omx_zones])
                            matrix_data.from_numpy(total_ct_ramp_trips)
                            expanded_matrix_data = matrix_data.expand([emme_zones, emme_zones])
                            matrix = emmebank.matrix("mf%s" % mode)
                            matrix.set_data(expanded_matrix_data, self.scenario)
                            
                            self.report([
                                ("person_demand", person_demand), 
                                ("internal_external_demand", internal_external_demand), 
                                ("cross_border_demand", cross_border_demand),
                                ("airport_demand", airport_demand), 
                                ("visitor_demand", visitor_demand), 
                                ("total_ct_ramp_trips", total_ct_ramp_trips)
                            ])
        finally:
            for period in periods:
                person[period].close()
                airport[period].close()
                cross_border[period].close()
                visitor[period].close()
                internal_external[period].close()

    def lookup_omx(self, file_name):
        directory = self.output_dir
        periods = ["EA", "AM", "MD", "PM", "EV"]
        matrix_tables = {}
        for period in periods:
            file_path = os.path.join(directory, file_name + "_" + period + ".mtx")
            matrix_tables[period] = _omx.openFile(file_path, 'r')
        return matrix_tables

    def report(self, matrices):
        emmebank = self.scenario.emmebank
        text = ['<div class="preformat">']
        num_cells = len(self.scenario.zone_numbers) ** 2
        text.append("Number of O-D pairs: %s. <br>" % num_cells)
        text.append("%-25s %9s %9s %9s %13s" % ("name", "min", "max", "mean", "sum"))
        for name, data in matrices:
            stats = (name, data.min(), data.max(), data.mean(), data.sum())
            text.append("%-25s %9.4g %9.4g %9.4g %13.7g" % stats)
        text.append("</div>")
        title = 'Transit demand summary'
        report = _m.PageBuilder(title)
        report.wrap_html('Matrix details', "<br>".join(text))
        _m.logbook_write(title, report.render())
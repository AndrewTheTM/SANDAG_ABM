#//////////////////////////////////////////////////////////////////////////////
#////                                                                       ///
#//// Copyright INRO, 2016-2017.                                            ///
#//// Rights to use and modify are granted to the                           ///
#//// San Diego Association of Governments and partner agencies.            ///
#//// This copyright notice must be preserved.                              ///
#////                                                                       ///
#//// import/import_transit_demand.py                                       ///
#////                                                                       ///
#////                                                                       ///
#////                                                                       ///
#////                                                                       ///
#//////////////////////////////////////////////////////////////////////////////
#
# Imports the transit demand generated from an iteration of the disaggregate 
# demand models (CT-RAMP) in preparation for the transit assignment
# 
# Note the matrix name mapping from the OMX file names to the Emme database names.
#
# Inputs:
#    output_dir: output directory to read the OMX files from
#    scenario: transit scenario to use for reference zone system
#
# Files referenced:
#    Note: pp is time period, one of EA, AM, MD, PM, EV
#    output/tranTrips_pp.omx
#    output/tranCrossBorderTrips_pp.omx
#    output/tranAirportTrips_pp.omx
#    output/tranVisitorTrips_pp.omx
#    output/tranInternalExternalTrips_pp.omx
#
# Matrix results:
#    Note: pp is time period, one of EA, AM, MD, PM, EV
#    pp_WLKBUS, pp_WLKLRT, pp_WLKCMR, pp_WLKEXP, pp_WLKBRT, 
#    pp_PNRBUS, pp_PNRLRT, pp_PNRCMR, pp_PNREXP, pp_PNRBRT, 
#    pp_KNRBUS, pp_KNRLRT, pp_KNRCMR, pp_KNREXP, pp_KNRBRT
#
# Script example:
"""
    import os
    modeller = inro.modeller.Modeller()
    main_directory = os.path.dirname(os.path.dirname(modeller.desktop.project.path))
    output_dir = os.path.join(main_directory, "output")
    scenario = modeller.scenario
    import_transit_demand = modeller.tool("sandag.model.import.import_transit_demand")
    import_transit_demand(output_dir, scenario)
"""


TOOLBOX_ORDER = 14


import inro.modeller as _m
import inro.emme.matrix as _matrix
import traceback as _traceback
import numpy
import omx as _omx
import os


dem_utils = _m.Modeller().module('sandag.utilities.demand')
gen_utils = _m.Modeller().module("sandag.utilities.general")


class ImportMatrices(_m.Tool(), gen_utils.Snapshot):

    output_dir = _m.Attribute(unicode)
    
    tool_run_msg = ""

    @_m.method(return_type=_m.UnicodeType)
    def tool_run_msg_status(self):
        return self.tool_run_msg

    def __init__(self):
        project_dir = os.path.dirname(_m.Modeller().desktop.project.path)
        main_dir = os.path.dirname(project_dir)
        self.output_dir = os.path.join(main_dir, "output")
        self.attributes = ["output_dir"]
        self._open_omx_files = []

    def page(self):
        pb = _m.ToolPageBuilder(self)
        pb.title = "Import transit demand"
        pb.description = """ 
<div style="text-align:left">    
    Imports the trip matrices generated by CT-RAMP in OMX format. <br>
    A total of 50 OMX files are expected, for 5 time periods
    EA, AM, MD, PM and EV, times 5 model segments for transit:
    <ul>
        <li>tranTrips_pp.omx</li>
        <li>tranCrossBorderTrips_pp.omx</li>
        <li>tranAirportTrips_pp.omx</li>
        <li>tranVisitorTrips_pp.omx</li>
        <li>tranInternalExternalTrips_pp.omx</li>
    </ul>
</div>
        """
        pb.branding_text = "- SANDAG - Model"

        if self.tool_run_msg != "":
            pb.tool_run_status(self.tool_run_msg_status)
        pb.add_select_file('output_dir', 'directory',
                           title='Select output directory')
        return pb.render()

    def run(self):
        self.tool_run_msg = ""
        try:
            scenario = _m.Modeller().scenario
            self(self.output_dir, scenario)
            run_msg = "Tool completed"
            self.tool_run_msg = _m.PageBuilder.format_info(run_msg, escape=False)
        except Exception as error:
            self.tool_run_msg = _m.PageBuilder.format_exception(
                error, _traceback.format_exc(error))
            raise

    @_m.logbook_trace("Create TOD transit trip tables", save_arguments=True)
    def __call__(self, output_dir, scenario):
        attributes = {"output_dir": output_dir}
        gen_utils.log_snapshot("Sum demand", str(self), attributes)

        self.scenario = scenario
        self.output_dir = output_dir
        self.import_transit_trips()

    @_m.logbook_trace("Import CT-RAMP transit trips from OMX")
    def import_transit_trips(self):
        emmebank = self.scenario.emmebank
        emme_zones = self.scenario.zone_numbers
        periods = ["EA", "AM", "MD", "PM", "EV"]
        modes_tmplt =      [
            "WLKBUS","WLKEXP","WLKBRT","WLKLRT","WLKCMR",
            "PNRBUS","PNREXP","PNRBRT","PNRLRT","PNRCMR",
            "KNRBUS","KNREXP","KNRBRT","KNRLRT","KNRCMR"
        ]
        omx_modes_tmplt = [
            "WLK_LOC","WLK_EXP","WLK_BRT","WLK_LRT","WLK_CMR",
            "PNR_LOC","PNR_EXP","PNR_BRT","PNR_LRT","PNR_CMR",
            "KNR_LOC","KNR_EXP","KNR_BRT","KNR_LRT","KNR_CMR"
        ]
        for period in periods:
            with _m.logbook_trace("Period %s" % period):
                try:
                    visitor = self.open_omx("tranVisitorTrips", period)
                    cross_border = self.open_omx("tranCrossBorderTrips", period)
                    airport = self.open_omx("tranAirportTrips", period)
                    person = self.open_omx("tranTrips", period)
                    internal_external = self.open_omx("tranInternalExternalTrips", period)
                    modes = [period + "_" + m for m in modes_tmplt]
                    omx_modes = [m + "_" + period for m in omx_modes_tmplt]
                    for mode, omx_mode in zip(modes, omx_modes):
                        with _m.logbook_trace("Import for mode %s" % mode):
                            visitor_demand = visitor[omx_mode].read()
                            cross_border_demand = cross_border[omx_mode].read()
                            airport_demand = airport[omx_mode].read()
                            person_demand = person[omx_mode].read()
                            internal_external_demand = internal_external[omx_mode].read()
                            total_ct_ramp_trips = (visitor_demand + cross_border_demand + airport_demand + person_demand + internal_external_demand)
                            
                            zone_mapping = person.mapping(person.listMappings()[0]).items()
                            zone_mapping.sort(key=lambda x: x[1])
                            omx_zones = [x[0] for x in zone_mapping]
                            if omx_zones == emme_zones:
                                matrix.set_numpy_data(total_ct_ramp_trips, self.scenario)
                            else:
                                matrix_data = _matrix.MatrixData(type='f', indices=[omx_zones, omx_zones])
                                matrix_data.from_numpy(total_ct_ramp_trips)
                                expanded_matrix_data = matrix_data.expand([emme_zones, emme_zones])
                                matrix = emmebank.matrix("mf%s" % mode)
                                matrix.set_data(expanded_matrix_data, self.scenario)

                            self.report([
                                ("person_demand", person_demand), 
                                ("internal_external_demand", internal_external_demand), 
                                ("cross_border_demand", cross_border_demand),
                                ("airport_demand", airport_demand), 
                                ("visitor_demand", visitor_demand), 
                                ("total_ct_ramp_trips", total_ct_ramp_trips)
                            ])
                finally:
                    self.close_all_omx()

    def open_omx(self, file_name, period):
        file_path = os.path.join(self.output_dir, file_name + "_" + period + ".mtx")
        omx_file = _omx.openFile(file_path, 'r')
        self._open_omx_files.append(omx_file)
        return omx_file

    def close_all_omx(self):
        while(self._open_omx_files):
            omx_file = self._open_omx_files.pop()
            try:
                omx_file.close()
            except:
                pass

    def report(self, matrices):
        emmebank = self.scenario.emmebank
        text = ['<div class="preformat">']
        num_cells = len(self.scenario.zone_numbers) ** 2
        text.append("Number of O-D pairs: %s. <br>" % num_cells)
        text.append("%-25s %9s %9s %9s %13s" % ("name", "min", "max", "mean", "sum"))
        for name, data in matrices:
            stats = (name, data.min(), data.max(), data.mean(), data.sum())
            text.append("%-25s %9.4g %9.4g %9.4g %13.7g" % stats)
        text.append("</div>")
        title = 'Transit demand summary'
        report = _m.PageBuilder(title)
        report.wrap_html('Matrix details', "<br>".join(text))
        _m.logbook_write(title, report.render())
